// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  photo   String?
  role     String   @default("USER")

  items     Item[]
  expenses  Expense[]
  incomes   Income[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExpenseType {
  VEGETABLE
  OTHER
}

model Item {
  id        Int   @id @default(autoincrement())
  name      String
  type      ExpenseType
  photo     String

  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  expenses  Expense[]
  incomes   Income[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id          Int       @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  
  item        Item         @relation(fields: [itemId], references: [id])
  itemId      Int

  type        ExpenseType

  // Common field
  total       Int

  // Field untuk tipe VEGETABLE
  totalQuantityKg   Float?

  // Field untuk tipe OTHER
  note        String?

  vegetableDetails VegetableExpenseDetail[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model VegetableExpenseDetail {
  id          Int       @id @default(autoincrement())
  expense     Expense      @relation(fields: [expenseId], references: [id])
  expenseId   Int

  farmerName  String
  phone       String?
  address     String?
  quantityKg  Float
  pricePerKg  Int
  totalPrice Int

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Income {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int

  item      Item        @relation(fields: [itemId], references: [id])
  itemId    Int

  totalPrice Int
  totalQuantityKg Float?

  note      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  incomeDetails IncomeDetail[]
}

model IncomeDetail {
  id          Int       @id @default(autoincrement())
  income      Income    @relation(fields: [incomeId], references: [id])
  incomeId    Int

  buyerName   String
  quantityKg  Float
  pricePerKg  Int
  totalPrice  Int
  note        String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model LovItem {
  id        Int     @id @default(autoincrement())
  name      String
  type      String
  photo     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}








